domain: "costgraph.internal"

affinity:
  # run on linux amd64 nodes
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
                - linux
            - key: kubernetes.io/arch
              operator: In
              values:
                - amd64

postgres:
  image: "postgres"
  tag: "14-alpine"
  enabled: false
  pvc:
    enabled: false
    size: "10Gi"
  resources:
    requests:
      memory: "100Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "2"
  config:
    postgres_db: costgraph
    postgres_user: user
    postgres_password: password
    pg_data_directory: /var/lib/postgresql/data
    postgres_host: db
    postgres_port: 5432

costgraph:
  operator:
    image: "ghcr.io/baselinehq/costgraph-operator"
    tag: "v0.1.7"
    port: 8090
    labels: {}
    annotations: {}
    env: []
# Specify the environment variables for the costgraph operator
#        - name: "POSTGRES_HOST"
#          value: "postgres"
#        - name: "POSTGRES_PORT"
#          value: "5432"
#        - name: "POSTGRES_DB"
#          value: "costgraph"
#        - name: "POSTGRES_USER"
#          valueFrom:
#            secretKeyRef:
#              name: postgres
#              key: postgres_user
#        - name: "POSTGRES_PASSWORD"
#          valueFrom:
#            secretKeyRef:
#              name: postgres
#              key: postgres_password
    resources:
      requests:
        memory: "100Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "1"
  config:
    # This is the endpoint of the prometheus server
    # It can have the protocol, host and port, e.g. http://prometheus-server.prometheus-system:9090
    # or just the host if it's running on default port 80 with http protocol
    # or https protocol on default port 443
    # If you are using a different port, make sure to include it in the URL
    prometheus_endpoint: "http://prometheus-server.prometheus-system"
    worker_count: 10
    expected_utilisation_percent:
      cpu: 80
      memory: 80
    costgraph_feature_flags:
      superset: false
      graph: true
      prometheus: true
      disable_iqr: false
    costgraph_instance_name: ""
    costgraph_instance_master_domains: []
    costgraph_instance_replication_provider: s3
    fortknox_server_url: https://fortknox.baselinehq.cloud
    api_key: ""
    # This is the port where our prometheus metrics exporter is listening on, not for the endpoint
    prometheus_metrics_port: 9090
    debug: false
    reconcile_time: 5m
    metric_window_days: 45
    # This can be either "kube_state_metrics" (default) or "gcp_managed_prometheus"
    prometheus_provider: ""

superset:
  image: "ghcr.io/baselinehq/costgraph-superset"
  tag: "v0.1.0"
  port: 8088
  enabled: false
  ingress:
    annotations: {}
    tls:
      enabled: false
      secret_name: ""
  resources:
    requests:
      memory: "500Mi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "2"
  config:
    superset_admin_username: admin
    superset_admin_email: admin@costgraph-superset.com
    superset_admin_password: admin
    superset_secret_key: test123
    superset_guest_username: guest
    superset_guest_email: guest@public.internal
    superset_guest_password: public
    superset_guest_role: "Public"
    server_worker_amount: "3"
    superset_dashboard_zip: "/app/dashboard.zip"